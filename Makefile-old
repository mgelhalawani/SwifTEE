

SGX_TRUSTED_LIBRARY_PATH ?= $(SGX_SDK)/lib64

CC ?= gcc
CC_VERSION := $(shell $(CC) -dumpversion)
CC_NO_LESS_THAN_8 := $(shell expr $(CC_VERSION) \>\= "8")
BINUTILS_DIR ?= /usr/local/bin

MITIGATION_CFLAGS += -B$(BINUTILS_DIR)
MITIGATION_LDFLAGS += -B$(BINUTILS_DIR)

ifeq ($(MITIGATION-CVE-2020-0551), LOAD)
ifeq ($(CC_NO_LESS_THAN_8), 1)
    MITIGATION_CFLAGS += -fcf-protection=none
endif
    MITIGATION_CFLAGS += -mindirect-branch-register -mfunction-return=thunk-extern
    MITIGATION_ASFLAGS := -Wa,-mlfence-after-load=yes -Wa,-mlfence-before-indirect-branch=memory -Wa,-mlfence-before-ret=shl
    MITIGATION_ASFLAGS += -fno-plt
    SGX_TRUSTED_LIBRARY_PATH := $(SGX_TRUSTED_LIBRARY_PATH)/cve_2020_0551_load
else ifeq ($(MITIGATION-CVE-2020-0551), CF)
ifeq ($(CC_NO_LESS_THAN_8), 1)
    MITIGATION_CFLAGS += -fcf-protection=none
endif
    MITIGATION_CFLAGS += -mindirect-branch-register -mfunction-return=thunk-extern
    MITIGATION_ASFLAGS := -Wa,-mlfence-before-indirect-branch=all -Wa,-mlfence-before-ret=shl
    MITIGATION_ASFLAGS += -fno-plt
    SGX_TRUSTED_LIBRARY_PATH := $(SGX_TRUSTED_LIBRARY_PATH)/cve_2020_0551_cf
endif


MITIGATION_CFLAGS += $(MITIGATION_ASFLAGS)

SGX_DEBUG ?= 1
SGX_SDK ?= ~/Documents/sgxsdk
Enclave_Name := enclave.so
SGX_LIBRARY_PATH := $(SGX_SDK)/lib64

SGX_COMMON_FLAGS := -m64
SGX_COMMON_FLAGS += -O0 -g
SGX_COMMON_FLAGS += -Wall -Wextra -Winit-self -Wpointer-arith -Wreturn-type \
                    -Waddress -Wsequence-point -Wformat-security \
                    -Wmissing-include-dirs -Wfloat-equal -Wundef -Wshadow \
                    -Wcast-align -Wcast-qual -Wconversion -Wredundant-decls

SGX_COMMON_CFLAGS := $(SGX_COMMON_FLAGS) -Wjump-misses-init -Wstrict-prototypes -Wunsuffixed-float-constants

Enclave_Include_Paths := -Iinclude -I$(SGX_SDK)/include -I$(SGX_SDK)/include/tlibc -I$(SGX_SDK)/include/libcxx

Enclave_C_Flags := $(Enclave_Include_Paths) -nostdinc -fvisibility=hidden -fpie -ffunction-sections -fdata-sections $(MITIGATION_CFLAGS)
CC_BELOW_4_9 := $(shell expr "`$(CC) -dumpversion`" \< "4.9")
ifeq ($(CC_BELOW_4_9), 1)
	Enclave_C_Flags += -fstack-protector
else
	Enclave_C_Flags += -fstack-protector-strong
endif

Enclave_Cpp_Flags := $(Enclave_C_Flags) -nostdinc++

SGX_COMMON_CXXFLAGS := $(SGX_COMMON_FLAGS) -Wnon-virtual-dtor -std=c++11

Enclave_Cpp_Files := enclave.cpp 
Enclave_Cpp_Objects := $(sort $(Enclave_Cpp_Files:.cpp=.o))

Enclave_Security_Link_Flags := -Wl,-z,relro,-z,now,-z,noexecstack

Trts_Library_Name := sgx_trts_sim
Service_Library_Name := sgx_tservice_sim
Crypto_Library_Name := sgx_tcrypto

Enclave_Link_Flags := $(Enclave_Security_Link_Flags) \
    -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L$(SGX_LIBRARY_PATH) \
	-Wl,--whole-archive -l$(Trts_Library_Name) -Wl,--no-whole-archive \
	-Wl,--start-group -lsgx_tstdc -lsgx_tcxx -l$(Crypto_Library_Name) -l$(Service_Library_Name) -Wl,--end-group \
	-Wl,-Bstatic -Wl,-Bsymbolic -Wl,--no-undefined \
	-Wl,-pie,-eenclave_entry -Wl,--export-dynamic  \
	-Wl,--defsym,__ImageBase=0 -Wl,--gc-sections   
#	-Wl,--version-script=Enclave/Enclave.lds

.PHONY: all enclave.so enclave.o clean 

all: enclave.so 

enclave.o: enclave.cpp 
	@echo "building cpp"
	@$(CXX) $(SGX_COMMON_CXXFLAGS) $(Enclave_Cpp_Flags) -c $< -o $@
	@echo "CXX  <=  $<"

enclave.so: enclave.o
	@echo "in enclave.so"
	@$(CXX) $^ -o enclave.so $(Enclave_Link_Flags)
	@echo "LINK =>  $@"


#	ld -o enclave.so enclave.o --no-undefined -pie -eenclave_entry -nostdlib \
#		--whole-archive -lsgx_trts_sim 
#		-L~/Documents/sgxsdk/lib64 --no-whole-archive --start-group -lsgx_tstdc -lsgx_tservice_sim -lsgx_crypto --end-group



clean: 
	rm -f enclave.o